
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
    if (root == NULL) return createNode(data);
    if (data < root->data)
        root->left = insert(root->left, data);
    else
        root->right = insert(root->right, data);
    return root;
}

int countNodes(struct Node* root) {
    if (root == NULL) return 0;
    return 1 + countNodes(root->left) + countNodes(root->right);
}

void findMedianUtil(struct Node* root, int* count, int target, int* result1, int* result2) {
    if (root == NULL) return;
    
    findMedianUtil(root->left, count, target, result1, result2);
    
    (*count)++;
    if (*count == target)
        *result1 = root->data;
    if (*count == target + 1)
        *result2 = root->data;
    
    findMedianUtil(root->right, count, target, result1, result2);
}

float findMedian(struct Node* root) {
    if (root == NULL) return 0;
    
    int n = countNodes(root);
    int count = 0, result1 = -1, result2 = -1;
    
    if (n % 2 == 1) {
        findMedianUtil(root, &count, (n / 2) + 1, &result1, &result2);
        return (float)result1;
    } else {
        findMedianUtil(root, &count, (n / 2), &result1, &result2);
        return (result1 + result2) / 2.0;
    }
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 6);
    root = insert(root, 3);
    root = insert(root, 8);
    root = insert(root, 1);
    root = insert(root, 4);
    root = insert(root, 7);
    root = insert(root, 9);
    
    printf("Median of BST: %.1f\n", findMedian(root));
    
    return 0;
}